<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="CodeTemplate.tt" #>
<#
var dimensions = new Dictionary<Int32, []>
{ 
  { 1, new[] { 'A', 'X' } },
  { 2, new[] { 'B', 'Y' } },
  { 3, new[] { 'C', 'Z' } },
  { 4, new[] { 'D', 'W' } }
};
var types = new[]
{
	new { Type = typeof(Double), Suffix = 'D' },
	new { Type = typeof(Single), Suffix = 'S' }
};

var codeTemplate = new CodeTemplate();

codeTemplate.RenderUsing("System");
codeTemplate.RenderUsing("System.Runtime.InteropServices");
codeTemplate.WriteLine();

using (codeTemplate.RenderNamespace())
{
  for (var dimension = 2; dimension <= 4; dimension++)
  {
    foreach (var type in types)
    {
      codeTemplate.WriteLine("[StructLayout(LayoutKind.Explicit)]");
      codeTemplate.WriteLine("public struct Vector{0}{1} : IVector<{2}>", dimension, type.Suffix, type.Type.Name);

      using (codeTemplate.RenderScope())
      {
        for (var index1 = 0; index1 < 2
        for (var index = 1; index <= dimension; index++)
        {
          codeTemplate.WriteLine("public {0} {1};", type.Type.Name, dimensions[index]);
        }
      }

      codeTemplate.WriteLine();
    }
  }
}

WriteLine(codeTemplate.TransformText());
#>