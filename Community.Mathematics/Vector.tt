<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#@ include file="T4Toolbox.tt" #>
<#
var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
var project = visualStudio.Solution
  .FindProjectItem(this.Host.TemplateFile)
  .ContainingProject as EnvDTE.Project;
var defaultNamespace = project.Properties
  .Item("DefaultNamespace")
  .Value
  .ToString();

var dimensions = new Dictionary<Int32, Char>
{ 
  { 1, 'X' },
  { 2, 'Y' },
  { 3, 'Z' },
  { 4, 'W' }
};
var types = new Dictionary<Type, Char>
{
  { typeof(Decimal), 'M' },
  { typeof(Double), 'D' },
  { typeof(Single), 'F' }
};



var codeTemplate = new CodeTemplate();

codeTemplate.WriteLine("using System;");
codeTemplate.WriteLine("using System.Collections;");
codeTemplate.WriteLine("using System.Collections.Generic;");
codeTemplate.WriteLine();

using (codeTemplate.RenderNamespace())
{
  for (var dimension = 2; dimension <= dimensions.Count; dimension++)
  {
    foreach (var type in types.Keys)
    {
      codeTemplate.WriteLine("public struct Vector{0}{1} : IVector<{2}>", dimension, types[type], type.Name);

      using (codeTemplate.RenderScope())
      {
        for (var index = 1; index <= dimension; index++)
        {
          codeTemplate.WriteLine("public {0} {1};", type.Name, dimensions[index]);
        }
      }

      codeTemplate.WriteLine();
    }
  }
}

Write(codeTemplate.TransformText());
#>
<#+
class CodeTemplate : CSharpTemplate
{
  private const String IndentString = "  ";
  
  public IDisposable RenderClass(String name)
  {
    WriteLine("public class " + name);

    return RenderScope();
  }

  public IDisposable RenderNamespace(String name = null)
  {
    WriteLine("namespace " + (name ?? DefaultNamespace));

    return RenderScope();
  }

  public IDisposable RenderScope()
  {
    WriteLine("{");
    PushIndent(IndentString);

    return new ActionDisposable(delegate
    {
      PopIndent();
      WriteLine("}");
    });
  }
  
  public IDisposable RenderStructure(String name)
  {
    WriteLine("public struct " + name);

    return RenderScope();
  }

  public override String TransformText()
  {
    return GenerationEnvironment.ToString();
  }

  public void WriteLine()
  {
    WriteLine(String.Empty);
  }
}
#>
<#+
class ActionDisposable : IDisposable
{
  private Action Action
  {
    get;
    set;
  }

  public ActionDisposable(Action action)
  {
    Action = action;
  }

  public void Dispose()
  {
    if (Action != null)
    {
      Action.Invoke();
    }
  }
}
#>